// Copyright (c) 2025 Columnar Technologies Inc.  All rights reserved.

package main

import (
	"crypto/sha256"
	"fmt"
	"io"
	"os"

	"github.com/Masterminds/semver/v3"
	"github.com/pelletier/go-toml/v2"
)

const lockFileVersion = 1

type lockInfo struct {
	Name     string          `toml:"name"`
	Version  *semver.Version `toml:"version"`
	Platform string          `toml:"platform,omitempty"`
	Checksum string          `toml:"checksum,omitempty"`
}

type LockFile struct {
	Version int        `toml:"version" comment:"This file is automatically @generated by dbc. Not intended for manual editing"`
	Drivers []lockInfo `toml:"drivers"`

	lockinfo map[string]lockInfo `toml:"-"`
}

func loadLockFile(p string) (LockFile, error) {
	var lf LockFile
	f, err := os.Open(p)
	if err != nil {
		return lf, fmt.Errorf("error opening lock file %s: %w", p, err)
	}
	defer f.Close()

	if err := toml.NewDecoder(f).Decode(&lf); err != nil {
		return lf, fmt.Errorf("error decoding lock file %s: %w", p, err)
	}

	lf.lockinfo = make(map[string]lockInfo)
	for _, d := range lf.Drivers {
		lf.lockinfo[d.Name] = d
	}

	return lf, nil
}

func checksum(path string) (string, error) {
	f, err := os.Open(path)
	if err != nil {
		return "", fmt.Errorf("error opening file %s for checksum: %w", path, err)
	}
	defer f.Close()

	h := sha256.New()
	if _, err := io.Copy(h, f); err != nil {
		return "", fmt.Errorf("error calculating checksum for file %s: %w", path, err)
	}

	return fmt.Sprintf("%x", h.Sum(nil)), nil
}
