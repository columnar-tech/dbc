# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

project_name: dbc
metadata:
  description: "A CLI utility for managing ADBC drivers"
  license: Apache-2.0
  homepage: "https://columnar.tech/dbc"
  maintainers:
    - "Columnar <hello@columnar.tech>"

# before:
  # hooks:
    # You may remove this if you don't use go modules.
    # - mkdir -p dist/python
    # you may remove this if you don't need go generate
    # - go generate ./...

builds:
  - main: ./cmd/dbc
    binary: dbc
    ldflags:
      - -s -w
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
      - freebsd
    goarch:
      - amd64
      - '386'
      - arm64
    mod_timestamp: "{{ .CommitTimestamp }}"

archives:
  - id: archives
    formats: [tar.gz]
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}-
      {{- .Os }}-
      {{- if eq .Arch "386" }}x86
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}-{{ .Version }}
    files:
      - 'LICENSE*'
      - 'README*'
      - src: '{{ .ArtifactPath }}*.sig'
        strip_parent: true
    # use zip for windows archives
    format_overrides:
      - goos: windows
        formats: [zip]
    hooks:
      after:
        # build wheels for each platform we built for
        - if: '{{ ne .Os "freebsd" }}'
          cmd: >-
            uv run ./scripts/create_wheels.py --binary_version {{ .RawVersion }}{{ .Prerelease }}
            --platform={{ .Os }}-{{- if eq .Arch "386" }}x86{{else}}{{ .Arch }}{{ end }} --archive=dist/{{ .ProjectName }}-
            {{- .Os }}-
            {{- if eq .Arch "386" }}x86
            {{- else }}{{ .Arch }}{{ end }}
            {{- if .Arm }}v{{ .Arm }}{{ end }}-{{ .Version }}{{ if eq .Os "windows" }}.zip{{ else }}.tar.gz{{ end }}

blobs:
  - provider: s3
    region: us-east-2
    bucket: dbc-distribution
    directory: "{{ .Tag }}"
    include_meta: true

binary_signs:
  - id: signs
    args: ["--output", "${signature}.sig", "-u", "hello@columnar.tech", "--detach-sign", "${artifact}"]
    stdin: "{{ .Env.SIGNING_PASSWORD }}"

changelog:
  sort: asc
  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+(/[[:word:]]+)*\))??!?:.+$'
      order: 0
    - title: "Bug fixes"
      regexp: '^.*?fix(\([[:word:]]+(/[[:word:]]+)*\))??!?:.+$'
      order: 1
    - title: Others
      order: 999

  filters:
    exclude:
      - "^docs:"
      - "^test:"

dockers:
  - image_templates:
    - "columnar/dbc:{{ .Version }}-amd64"
    use: buildx
    dockerfile: Dockerfile
    build_flag_templates:
      - "--platform=linux/amd64"
  - image_templates:
    - "columnar/dbc:{{ .Version }}-arm64v8"
    use: buildx
    goarch: arm64
    dockerfile: Dockerfile
    build_flag_templates:
      - "--platform=linux/arm64/v8"

docker_manifests:
  - name_template: "columnar/dbc:{{ .Version }}"
    image_templates:
      - "columnar/dbc:{{ .Version }}-amd64"
      - "columnar/dbc:{{ .Version }}-arm64v8"

dockerhub:
  - username: "columnar"
    secret_name: "DOCKER_TOKEN"
    images:
      - "columnar/dbc:{{ .Version }}-amd64"
      - "columnar/dbc:{{ .Version }}-arm64v8"

nfpms:
  - id: pkgs
    package_name: dbc
    file_name_template: "{{ .ConventionalFileName }}"
    if: '{{ eq .Os "linux" }}'
    vendor: Columnar
    description: >-
      A CLI utility for managing ADBC drivers

    formats:
      - deb
      - rpm
    meta: false

snapcrafts:
  - id: snaps
    name: dbc
    summary: CLI for managing ADBC drivers
    description: A command-line interface for interacting with ADBC drivers.
    icon: ./resources/dbc.png
    hooks:
      install:
        - network
    base: bare
    confinement: classic
    publish: false
    plugs:
      system-files:
        read:
          - /etc/adbc
        write:
          - /etc/adbc
      personal-files:
        read:
          - $HOME/.config/adbc
        write:
          - $HOME/.config/adbc

msi:
  - id: msi
    name: "dbc-{{ .MsiArch }}"
    wxs: ./resources/dbc.wxs
    extensions:
      - ui
    extra_files:
      - ./resources/dbc.ico
      - ./resources/dbc.bmp
      - ./ui/bitmaps/dlgbmp.bmp
      - ./ui/bitmaps/bannrbmp.bmp

signs:
  - artifacts: all
    ids:
      - msi
      - archives
    args: ["--output", "${signature}", "-u", "hello@columnar.tech", "--detach-sign", "${artifact}"]

after:
  hooks:
    - mkdir -p dist/python
    - cmd: sh -c "mv dist/*.whl dist/python/"

notarize:
  macos:
    - enabled: '{{ isEnvSet "MACOS_SIGN_P12" }}'
      sign:
        certificate: "{{ .Env.MACOS_SIGN_P12 }}"
        password: "{{ .Env.MACOS_SIGN_PASSWORD }}"

      notarize:
        issuer_id: "{{ .Env.MACOS_NOTARY_ISSUER_ID }}"
        key: "{{ .Env.MACOS_NOTARY_KEY }}"
        key_id: "{{ .Env.MACOS_NOTARY_KEY_ID }}"
        wait: true
        timeout: 30m

release:
  ids:
    - archives
    - msi
    - snaps
    - pkgs
  prerelease: auto
  extra_files:
    - glob: ./dist/*.whl
  header: >-
    ## dbc Release ({{ .Date }})

  footer: >-

    ---

    Released by [GoReleaser](https://github.com/goreleaser/goreleaser).
